version: '3'

services:

  service-discovery:
    image: service-discovery-image
    container_name: service-discovery-container
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
    environment:
      - spring.application.name=service-discovery
      - server.port=8761
      - eureka.client.fetch-registry=false
      - eureka.client.register-with-eureka=false
    ports:
      - 8761:8761
    healthcheck:
      test: "exit 0"
    networks:
      - helloworld-network

  service-config:
    image: service-config-image
    container_name: service-config-container
    build:
      context: ./service-config
      dockerfile: Dockerfile
    environment:
      - spring.application.name=service-config
      - server.port=8888
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka
      - management.endpoints.jmx.exposure.include=health,info,env,beans
      - management.endpoints.web.exposure.include=health,info,env,beans
      - spring.cloud.config.server.git.uri=https://github.com/wisniewskikr/springcloud-config
      - spring.cloud.config.server.git.clone-on-start=true
    ports:
      - 8888:8888
    healthcheck:
      test: "exit 0"
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - helloworld-network

  service-helloworld-storage:
    image: service-helloworld-storage-image
    build:
      context: ./service-helloworld-storage
      dockerfile: Dockerfile
    environment:
      - spring.application.name=service-helloworld-storage
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka
      - management.endpoints.jmx.exposure.include=health,info,env,beans
      - management.endpoints.web.exposure.include=health,info,env,beans
      - spring.config.import=optional:configserver:http://service-config:8888
    ports:
      - 8081
    healthcheck:
      test: "exit 0"
    depends_on:
      service-config:
        condition: service_healthy
    networks:
      - helloworld-network  

  service-helloworld-display:
    image: service-helloworld-display-image
    container_name: service-helloworld-display-container
    build:
      context: ./service-helloworld-display
      dockerfile: Dockerfile
    environment:
      - spring.application.name=service-helloworld-display
      - server.port=8080
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka
      - management.endpoints.jmx.exposure.include=health,info,env,beans
      - management.endpoints.web.exposure.include=health,info,env,beans
      - service.helloworld.storage.name=service-helloworld-storage
    ports:
      - 8080:8080
    healthcheck:
      test: "exit 0"
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - helloworld-network

  service-gateway:
    image: service-gateway-image
    container_name: service-gateway-container
    build:
      context: ./service-gateway
      dockerfile: Dockerfile
    environment:
      - spring.application.name=service-gateway
      - server.port=8762
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka
      - management.endpoints.jmx.exposure.include=health,info,env,beans
      - management.endpoints.web.exposure.include=health,info,env,beans
      - spring.cloud.gateway.routes[0].id=service-helloworld-display
      - spring.cloud.gateway.routes[0].uri=lb://service-helloworld-display
      - spring.cloud.gateway.routes[0].predicates[0]=Path=/service-helloworld-display**
      - spring.cloud.gateway.routes[0].filters[0]=RewritePath=/service-helloworld-display,/
    ports:
      - 8762:8762
    healthcheck:
      test: "exit 0"
    depends_on:
      service-helloworld-storage:
        condition: service_healthy
      service-helloworld-display:
        condition: service_healthy
    networks:
      - helloworld-network  

networks:
  helloworld-network:
    name: helloworld-network